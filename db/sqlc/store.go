package db

import (
	"context"
	"database/sql"
	"fmt"
)

// SQLStore provides all functions to execute db queries and transactions
// For individual queries, we already have the Queries struct in db.go (generated by sqlc)
// each query does 1 operation per table so it doesnt support transactions (COMMIT/ROLLBACK)
// This file will extend its functionality to support Transactions
// by embedding it in the store struct (This is called composition)
// It is the preferred way to extend struct functionality in goLang instead of inheritance
type SQLStore struct {
	*Queries // all individual Query functions provided by `Queries` is available to Store struct
	db       *sql.DB
}

// Store was created to be able to mock the DB for our tests.
// note : we updated sqlc.yaml with `emit_interface: true`, then we ran `make sqlc`
// so we won't have to copy everything that Queries implements into store interface (Check querier.go)
type Store interface {
	Querier
	CreateUserTx(ctx context.Context, arg CreateUserTxParams) (CreateUserTxResult, error)
	VerifyEmailTx(ctx context.Context, arg VerifyEmailTxParams) (VerifyEmailTxResult, error)
}

func NewStore(db *sql.DB) Store {
	return &SQLStore{
		db:      db,
		Queries: New(db), // New was generated by sqlc (creates and returns Queries obj)
	}
}

// execTx executes a function within a database transaction
// starts with lower case e (unexported) because we do not want external packages to call it directly.
// instead, we'll provide an exported function for each specific transaction
func (store *SQLStore) execTx(ctx context.Context, fn func(*Queries) error) error {

	tx, err := store.db.BeginTx(ctx, nil) // &sql.TxOptions{} lets you set isolation level and read only property

	if err != nil {
		return err
	}

	q := New(tx) // this works cuz New accepts Db.tx interface
	err = fn(q)

	if err != nil {
		if rbErr := tx.Rollback(); rbErr != nil {
			//if rollback fails
			return fmt.Errorf("tx err: %v, rb error : %v", err, rbErr) // output and return the original err + rollback err
		}
		return err // if rollback successful , return original tx error
	}
	return tx.Commit()
}
